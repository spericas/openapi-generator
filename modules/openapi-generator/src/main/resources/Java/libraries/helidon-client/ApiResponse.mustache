{{>licenseInfo}}

package {{invokerPackage}};

import java.util.List;
import java.util.Map;
{{#caseInsensitiveResponseHeaders}}
import java.util.Map.Entry;		
import java.util.TreeMap;
{{/caseInsensitiveResponseHeaders}}
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;


import io.helidon.media.common.MessageBodyReadableContent;
import io.helidon.webclient.WebClientResponse;

/**
 * API response returned by API call.
 *
 * @param <T> The type of data that is deserialized from response body
 */
public class ApiResponse<T> {
    private final WebClientResponse response;
    private final Class<T> type;
    private final Map<String, List<String>> headers;

    /**
     * @param response The WebClientResponse for the response
     */
    public ApiResponse(WebClientResponse response) {
        this(response, null);
    }


    /**
     * @param response The WebClientResponse for the response
     * @param type The type of the object in the response body
     */
    public ApiResponse(WebClientResponse response, Class<T> type) {
      this.response = response;
      this.type = type;
      {{#caseInsensitiveResponseHeaders}}
      Map<String, List<String>> responseHeaders = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
      for(Map.Entry<String, List<String>> entry : response.headers().toMap().entrySet()){
        responseHeaders.put(entry.getKey().toLowerCase(), entry.getValue());
      }
      {{/caseInsensitiveResponseHeaders}}
      this.headers = {{#caseInsensitiveResponseHeaders}}responseHeaders{{/caseInsensitiveResponseHeaders}}{{^caseInsensitiveResponseHeaders}}response.headers().toMap(){{/caseInsensitiveResponseHeaders}};
    }

    public int getStatusCode() {
        return response.status().code();
    }

    public Map<String, List<String>> getHeaders() {
        return headers;
    }

    public T getData() throws ApiException {
        try {
            return response.content().as(type).get();
        } catch (InterruptedException | ExecutionException e) {
            throw new ApiException(e);
        }
    }

    public static <T> CompletableFuture<T> getFutureData(ApiResponse<T> apiResponse) {
        try {
            return CompletableFuture.completedFuture(apiResponse.getData());
        } catch (ApiException e) {
            return CompletableFuture.failedFuture(e);
        }
    }

    public MessageBodyReadableContent getContent() {
        return response.content();
    }
}
